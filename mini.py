# -*- coding: utf-8 -*-
"""Mini.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FuehGuUNcboD7qzkP8BCiaOpHjnGyYmo
"""

import pandas as pd
import numpy as np
import seaborn as sns
from sklearn import datasets,linear_model
from sklearn.metrics import mean_squared_error,r2_score,mean_absolute_error
df=pd.read_csv("Birth.csv")
print(df)

df["decade"]=10*(df["Year"]//10)
print(df.head())

print(df.info())

print(df.describe())

print(df.isnull().sum())

#descriptive statistics
print("sum of birth rate:",df["Birth Rate"].sum())
print("mean of birth rate:",df["Birth Rate"].mean())
print("standard deviation of birth rate:",df["Birth Rate"].std())
print("variance of birth rate:",df["Birth Rate"].var())
print("minimun of birth rate:",df["Birth Rate"].min())
print("maximum of birth rate:",df["Birth Rate"].max())

#creating x and y
x=df["Year"]
y=df["Birth Rate"]

print(x.shape)

#Reshaping the data properly
x=x.values.reshape(-1,1)
print(x.shape)

# SPLITTING  THE VARIABLES AS TRAINING AND TESTING
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, train_size = 0.8, test_size = 0.2, random_state = 100)

# TAKE A LOOK AT THE SPLITTED DATASET
print(x.shape)
print(y.shape)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

df['Birth Rate'].fillna(0, inplace=True)
df['Year'].fillna(0, inplace=True)

from sklearn import linear_model
regr = linear_model.LinearRegression()
regr.fit(x_train,y_train)

print(regr.coef_)

print(regr.intercept_)

# VISUALIZING THE REGRESSION LINE
import matplotlib.pyplot as plt
plt.scatter(x_train, y_train)
plt.plot(x_train, -319.76 + 0.182*x_train, 'r')
plt.show()

# Predicting y_value using teting data of X
y_pred = regr.predict(x_test)
print(y_pred)
# Creating residuals from the y_train and y_pred
res = (y_test - y_pred)

import warnings
warnings.filterwarnings('ignore')

import seaborn as sns
fig = plt.figure()
sns.distplot(res, bins = 15)
fig.suptitle('Error Terms', fontsize = 15)                  # Plot heading
plt.xlabel('y_train - y_train_pred', fontsize = 15)         # X-label
plt.show()

# Checking the R-squared value
from sklearn.metrics import r2_score
r_squared = r2_score(y_test, y_pred)
print(r_squared)

# Mean square error
from sklearn.metrics import mean_squared_error,mean_absolute_error
print('Mean squared error: %.2f'% mean_squared_error(y_test, y_pred))
# The mean absolute error
print('Mean Absolute Error: %.2f'% mean_absolute_error(y_test, y_pred))

import matplotlib.pyplot as plt
plt.xlabel("decade")
plt.ylabel("BirthRate")
plt.bar(df["decade"],df["Birth Rate"])
plt.show()

plt.xlabel("Year")
plt.ylabel("Birth Rate")
plt.bar(df["Year"],df["Birth Rate"])

plt.xlabel("Race")
plt.ylabel("Birth Rate")
plt.bar(df["Race"],df["Birth Rate"])
plt.show()

plt.xlabel("Age")
plt.ylabel("Birth Rate")
plt.bar(df["Age"],df["Birth Rate"])
plt.show()

df["Year"]=df["Year"].astype(str)
df["decade"]=df["decade"].astype(str)
pt=df.pivot_table(df, index=df['Age'], columns=df["Race"], aggfunc='mean')
pt

import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
pt.plot()
plt.show()

pt1=df.pivot_table(df, index=df['decade'], columns=df["Race"], aggfunc='mean')
pt1

pt1.plot()
plt.show()

pt2=df.pivot_table(df, index=df['decade'], columns=df["Age"], aggfunc='mean')
pt2

pt2.plot()
plt.show()